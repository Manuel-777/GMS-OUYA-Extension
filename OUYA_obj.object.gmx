<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ouya_is_ouya() {
    // ouyaIAPCreate is required before calling almost anything ouya-related
    // this will also trigger the UUID callback
    ouya_iap_create("00000000-0000-0000-0000-000000000000");
    
    // simple save/laod test
    ouya_put_data("keytest", "ThisIsSomeDataThatWasJustSaved");
    saved_data = ouya_get_data("keytest");
    
    // our products ids
    // this is the entitlement
    prod_a = ouya_iap_product_add("test_product_e");
    // these are all consumables
    prod_b = ouya_iap_product_add("test_product_b");
    prod_c = ouya_iap_product_add("test_product");
    // ask for the store data
    ouya_iap_product_refresh();
}

// Create an empty list to store products data later on
global.products = ds_list_create();
json = -99;
alarm[0] = 1;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// This is only to adjust the view and surface size to match
// the screen (so it doesnt blur or stretch)
if ouya_is_ouya() {
    adjust_screen(1280, 720);
}
else {
    adjust_screen(display_get_width(), display_get_height());
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="66">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ouya_is_ouya() {
    // clear old list
    ds_list_destroy(global.products);
    if json != -99 {
        ds_map_destroy(json);
    }
    
    // request up-to-date json tree
    prods_str = ouya_iap_product_get_json();
    
    //decode it
    json = json_decode(prods_str);
    
    // store new product list
    global.products = ds_map_find_value(json, "poducts");
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ouya_is_ouya() {
    UUID = ouya_get_uuid();
    username = ouya_get_username();
    
    draw_text(128, 64, "***** OUYA EXTENSION TEST *****
Saved data: "+saved_data+"
Username: "+username+"
UUID: "+UUID);
}
else {
    draw_text(128, 64, "***** OUYA EXTENSION TEST *****
Not running on OUYA hardware");
}
// default as true in case receipts query is still pending
// we only do this for this product because this is an entitlement
// consumables do not show as purchased even if you already bought it
prod_a_purchased = true;

// Display IAPs
for (i=0; i&lt;ds_list_size(global.products); i++) {
    prod = ds_list_find_value(global.products, i);
    
    product_purchased = ds_map_find_value(prod, "purchased");
    product_id = ds_map_find_value(prod, "id");
    product_cost = ds_map_find_value(prod, "cost");
    product_name = ds_map_find_value(prod, "name");
    
    //
    if product_id == "test_product_e" {
        prod_a_purchased = product_purchased;
    }
    
    // draw
    draw_text(128, 240+(i*32), product_name+" costs $"+string(product_cost/100)+" - Purchased: "+string(product_purchased));
}

// check all gamepads 
for (i=0; i&lt;10; i++) {
    // show buy dialogs when pressing the face buttons
    if gamepad_button_check_pressed(i, gp_face1) {// O
        // do not allow double buy of entitlements!
        // OUYA doesnt do this for you, it has to be done in the game
        if prod_a_purchased == 0 {
            ouya_iap_product_buy(prod_a);
        }
        else {
            show_message_async("You already bought this item!");
        }
    }
    if gamepad_button_check_pressed(i, gp_face3) {
        ouya_iap_product_buy(prod_b);
    }
    if gamepad_button_check_pressed(i, gp_face4) {
        ouya_iap_product_buy(prod_c);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
